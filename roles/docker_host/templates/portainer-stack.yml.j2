version: "3.9"

networks:
  traefik-public:
    driver: overlay
    attachable: true
    name: traefik-public
  
  agent_network:
    driver: overlay
    attachable: true
    name: agent_network

services:
  agent:
    image: {{ docker_host.portainer.agent_image }}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    ports:
      - "9001:9001"
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  traefik:
    image: "{{ docker_host.traefik.image }}"
    command:
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik-public"
      - "--entryPoints.web.address=:80"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--api.debug=true"
      - "--entryPoints.traefik.address=:8080" # Dashboard port
      - "--log"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "8080:80"   # HTTP traffic
      - "8081:8080" # Dashboard access
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik-public
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.{{ docker_host.domain }}`)"
        - "traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080"
        - "traefik.http.routers.traefik-dashboard.entrypoints=traefik"
        - "traefik.http.routers.traefik-dashboard.service=api@internal"
        - "traefik.http.services.dummy-svc.loadbalancer.server.port=9999"
        - "traefik.docker.network=traefik-public"


  portainer:
    image: {{ docker_host.portainer.image }}
    command: -H tcp://tasks.agent:9001 --tlsskipverify --bind :9000 --tunnel-port 8000
    ports:
      - "9000:9000"
      - "8000:8000"
    networks:
      - agent_network
    volumes:
      - {{ docker_host.portainer.data_volume_path }}:/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]
